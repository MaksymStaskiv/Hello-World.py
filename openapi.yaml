openapi: 3.0.1
info:
  title: Swagger Notestore
  description: "This is a sample Notestore server.  \n"
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://virtserver.swaggerhub.com/maksym_staskiv/newname/1.0.0
- url: http://virtserver.swaggerhub.com/maksym_staskiv/newname/1.0.0
tags:
- name: note
  description: Everything about your Notes
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
paths:
  /note/{userId}:
    put:
      tags:
      - note
      summary: Update an existing note
      operationId: updateNote
      parameters:
      - name: userId
        in: path
        description: ID of user to return
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Note object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
          application/xml:
            schema:
              $ref: '#/components/schemas/Note'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Note not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - notestore_auth:
        - write:notes
        - read:notes
      x-codegen-request-body-name: body
    post:
      tags:
      - note
      summary: Add a new Note
      operationId: addNote
      parameters:
      - name: userId
        in: path
        description: ID of user to return
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Note object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
          application/xml:
            schema:
              $ref: '#/components/schemas/Note'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - notestore_auth:
        - write:notes
        - read:notes
      x-codegen-request-body-name: body
  
  /note/find/{noteId}:
    get:
      tags:
      - note
      summary: Find note by ID
      description: Returns a single note
      operationId: getNoteById
      parameters:
      - name: noteId
        in: path
        description: ID of note to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
            application/xml:
              schema:
                $ref: '#/components/schemas/Note'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Note not found
          content: {}
      security:
      - api_key: []
  /note/update/{noteId}:
    post:
      tags:
      - note
      summary: Updates a note in with form data
      operationId: updateNoteWithForm
      parameters:
      - name: noteId
        in: path
        description: ID of note that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the note
                status:
                  type: string
                  description: Updated status of the note
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - notestore_auth:
        - write:notes
        - read:notes
  /note/delete/{noteId}:
    delete:
      tags:
      - note
      summary: Deletes a note
      operationId: deleteNote
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: noteId
        in: path
        description: Note id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Note not found
          content: {}
      security:
      - notestore_auth:
        - write:notes
        - read:notes
  
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
      security:
      - user_auth:
        - write:user
        - read:user
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
        - user_auth:
          - write:user
          - read:user
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
        - user_auth:
          - write:user
          - read:user
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Note:
      required:
      - name
      - photoUrls
      type: object
      properties:
        userId:
          type: array
          items:
            type: integer
          maximum: 5
        owner:
          $ref: '#/components/schemas/User'
        id:
          type: integer
          format: int64
        name:
          type: string
          example: essay
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: note status 
          enum:
          - created
          - opened
          - edited
          - saved
          - closed
      xml:
        name: Note
    
  securitySchemes:
    user_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://notestore.swagger.io/oauth/dialog
          scopes:
            write:user: only logged-in users
            read:user: only logged-in users
    notestore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://notestore.swagger.io/oauth/dialog
          scopes:
            write:notes: modify notes in your account
            read:notes: read your notes
    api_key:
      type: apiKey
      name: api_key
      in: header